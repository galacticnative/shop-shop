{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/queries.js","utils/helpers.js","components/ProductItem/index.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductList","useQuery","loading","data","useEffect","forEach","then","className","category","ProductItem","key","image","name","price","quantity","src","spinner","alt","CategoryMenu","categoryData","item","onClick","id","setCategory","currentCatergory","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","CartItem","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","role","aria-label","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","find","indexedProducts","to","description","itemInCart","cartItem","parseInt","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","target","onSubmit","htmlFor","placeholder","onChange","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0dfbd72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import { useReducer } from 'react';\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CURRENT_CATEGORY,\n    UPDATE_CATEGORIES,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        \n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        \n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n            case ADD_MULTIPLE_TO_CART:\n                return {\n                  ...state,\n                  cart: [...state.cart, ...action.products],\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n              \n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                      product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n\n    default:\n        return state;\n    }\n};\n\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport ProductItem from \"../ProductItem\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n  \n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({ setCategory }) {\n  const [state, dispatch] = useStoreContext();\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCatergory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();","import React, { useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from \"../../utils/queries\"\nimport { idbPromise } from \"../../utils/helpers\"\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport \"./style.css\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session })\n      })\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n              </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n          </span>\n          You haven't added anything to your cart yet!\n          </h3>\n        )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { idbPromise } from \"../utils/helpers\";\nimport Cart from \"../components/Cart\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\nimport { useStoreContext } from \"../utils/GlobalState\";\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\n\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // delete item from indexDB\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER, ADD_USER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n          const cart = await idbPromise('cart', 'get');\n          const products = cart.map(item => item._id);\n          \n          if (products.length) {\n            const { data } = await addOrder({ variables: { products } });\n            const productData = data.addOrder.products;\n        \n            productData.forEach((item) => {\n              idbPromise('cart', 'delete', item);\n            });\n          }\n            \n          setTimeout(() => {\n            window.location.assign('/');\n          }, 3000);\n        }\n    \n        saveOrder();\n    }, [addOrder]);\n\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for you purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage.\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport Success from \"./pages/Success\";\nimport OrderHistory from \"./pages/OrderHistory\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}